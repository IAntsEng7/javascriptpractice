2024.03.06 手風琴側邊欄的功能:

從數據結構開始，定義了三個接口:

1. `AccordionLink`
   - 這個接口描述了每個連結按鈕的結構,包含兩個屬性:
     - `content`: 連結按鈕顯示的文本內容
     - `link`: 連結的目標路由路徑

2. `AccordionItem`
   - 這是一個泛型接口,描述了每個手風琴項目的結構
     - `id`: 手風琴項目的唯一標識符,可以是字符串類型
     - `links`: 一個 `AccordionLink` 數組,表示該手風琴項目包含的所有連結按鈕

3. `AccordionState`
   - 這個接口描述了 `accordionState` 對象的結構
     - 它使用了索引簽名 `[key: string]: boolean`,表示 `accordionState` 對象是一個字符串到布爾值的映射

接下來定義了 `accordionContent` 對象, 它是一個 `Record<string, AccordionItem<string>>`類型的對象。
這意味著 `accordionContent` 對象的鍵是字符串, 值是 `AccordionItem<string>` 類型的對象。

在這個例子中, 定義了兩個手風琴項目 `collapseOne` 和 `collapseTwo`,
每個項目包含一個 `id` 和一個包含多個 `AccordionLink` 對象的 `links` 數組。

在 `setup` 函數中, 使用 `reactive` 創建了一個響應式的 `state` 對象, 其中包含了 `accordionState` 屬性。
`accordionState` 對象的鍵與 `accordionContent` 中的手風琴項目 `id` 相對應, 值表示該手風琴項目是否處於展開狀態。

`toggleAccordion` 函數用於切換手風琴項目的展開/收起狀態，當點擊某個手風琴項目的按鈕時,會調用這個函數並傳入相應的 `accordionId`。
函數會檢查 `accordionId` 是否存在於 `accordionState` 對象中, 如果存在,則切換該項目的展開/收起狀態。

在模板中, 使用 `v-for` 遍歷 `accordionContent` 對象的鍵值對。
對於每個手風琴項目, 渲染一個 `<div>` 元素作為手風琴項目的容器。

在手風琴項目容器內,有以下元素:

1. 一個 `<h2>` 元素,包含一個按鈕。這個按鈕的 `collapsed` 類名與該手風琴項目的展開/收起狀態相關聯。
   當點擊這個按鈕時,會觸發 `toggleAccordion` 函數,切換該手風琴項目的狀態。
2. 一個 `<div>` 元素,包含手風琴項目的內容。這個 `<div>` 的 `show` 類名也與該手風琴項目的展開/收起狀態相關聯。

在手風琴項目內容容器中, 使用另一個 `v-for` 循環渲染該手風琴項目包含的所有連結按鈕。
對於每個 `AccordionLink` 對象, 使用 `<router-link>` 組件渲染一個連結按鈕, 並綁定了 `to` 屬性到連結的目標路由路徑。

這個功能實現了一個可展開/收起的手風琴側邊欄, 每個手風琴項目都包含一個或多個連結按鈕。
當點擊手風琴項目的按鈕時, 該項目會展開或收起, 顯示或隱藏其中的連結按鈕。
這樣的結構可以很好的組織和管理大量的導航連結, 使界面更加清晰和易於使用。

同時, 也使用了 TypeScript 來確保代碼的類型安全性, 定義了多個接口來描述不同的數據結構。
這樣可以在開發階段捕獲潛在的類型錯誤,提高代碼的可維護性和可擴展性。